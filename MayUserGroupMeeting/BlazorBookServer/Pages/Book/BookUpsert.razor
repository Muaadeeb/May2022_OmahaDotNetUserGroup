@page "/book/create"
@page "/book/edit/{Id:int}"

@using Microsoft.AspNetCore.Components
@inject NavigationManager _navigationManager
@inject IBookManager _bookManager
@inject IJSRuntime _jsRuntime

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Book</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="BookDto" OnValidSubmit="HandleBookUpsert">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="form-group">
                        <label>Title</label>
                        <InputText @bind-Value="BookDto.Title" class="form-control" />
                        <ValidationMessage For="()=> BookDto.Title"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>First Name</label>
                        <InputText @bind-Value="BookDto.AuthorFirstName" class="form-control" />
                        <ValidationMessage For="()=> BookDto.AuthorFirstName"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Last Name</label>
                        <InputText @bind-Value="BookDto.AuthorLastName" class="form-control" />
                        <ValidationMessage For="()=> BookDto.AuthorLastName"></ValidationMessage>
                    </div>
                   <div class="form-group">
                        <label>Print Length</label>
                        <InputNumber @bind-Value="BookDto.PrintLength" class="form-control" />
                        <ValidationMessage For="()=> BookDto.PrintLength"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Publisher</label>
                        <InputText @bind-Value="BookDto.Publisher" class="form-control" />
                        <ValidationMessage For="()=> BookDto.Publisher"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>ASIN / ISBN </label>
                        <InputText @bind-Value="BookDto.ISBN" class="form-control" />
                        <ValidationMessage For="()=> BookDto.ISBN"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Price </label>
                        <InputNumber @bind-Value="BookDto.Price" class="form-control" />
                        <ValidationMessage For="()=> BookDto.Price"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Comments</label>
                        <InputText @bind-Value="BookDto.Comments" class="form-control" />
                        <ValidationMessage For="()=> BookDto.Comments"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <label>Review Rating</label>
                        <InputNumber @bind-Value="BookDto.ReviewRating" class="form-control" />
                        <ValidationMessage For="()=> BookDto.ReviewRating"></ValidationMessage>
                    </div>


                    <div class="form-group">
                        <button class="btn btn-primary">@Title Book </button>
                        <NavLink href="book-list" class="btn btn-secondary">Back</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private BookDTO BookDto { get; set; } = new BookDTO();
    private string Title { get; set; } = "Create";

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";
            BookDto = await _bookManager.GetBookAsync(Id.Value);
        }
        else
        {
            Title = "Create";
            BookDto = new();
        }
    }
    

    private async Task HandleBookUpsert()
    {
        try
        {
            if (BookDto.Id != 0 && Title == "Update")
            {
                var updateResult = await _bookManager.UpdateBookAsync(BookDto);

                if (updateResult != null)
                {
                    await _jsRuntime.ToastrSuccess("Person updated successfully.");
                }
                else
                {
                    await _jsRuntime.ToastrError("Something went wrong.  Person was not successfully updated, try again.");
                }
            }
            else
            {
                var createdResult = await _bookManager.CreateBookAsync(BookDto);
                if (createdResult != null)
                {
                    await _jsRuntime.ToastrSuccess("Person created successfully.");
                }
                else
                {
                    await _jsRuntime.ToastrError("Something went wrong.  Person was not successfully created, try again.");
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Whoops! Location: Handle Person Upsert -> {ex.Message}");
        }

        _navigationManager.NavigateTo("book-list");
    }
}