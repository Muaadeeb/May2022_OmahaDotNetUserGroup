@page "/book-list"

@inject IBookManager _bookManager
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<div class="row mt-4">
    <div class="col">
        <h4 class="card-title text-info">My Library</h4>
    </div>

    <div class="col-3 offset-1">
        <NavLink href="book/create" class="btn btn-info form-control">Add New Book</NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>AuthorFirstName</th>
                <th>AuthorLastName</th>
                <th>PrintLength</th>
                <th>Publisher</th>
                @*<th>PublicationDate</th>*@
                <th>ISBN</th>
                <th>IsActive</th>
                <th>Price</th>
                <th>Review Rating</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
                @if (Books.Any())
                {
                    @foreach (var book in Books)
                    {
                        <tr>
                            <td>@book.Id</td>
                            <td>@book.Title</td>
                            <td>@book.AuthorFirstName</td>
                            <td>@book.AuthorLastName</td>
                            <td>@book.PrintLength</td>
                            <td>@book.Publisher</td>
                            @*<td>@book.PublicationDate</td>*@
                            <td>@book.ISBN</td>
                            <td>@book.IsActive</td>
                            <td>@book.Price</td>
                            <td>@book.ReviewRating</td>
                            <td>
                                <NavLink href="@($"book/edit/{book.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=> HandleDelete(book.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No Records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<_DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

@code {

    public IEnumerable<BookDTO> Books { get; set; } = new List<BookDTO>();
    private int? DeleteId { get; set; } = null;

    private bool IsProcessing { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        Books = await _bookManager.GetBooksAsync();
    }

    private async Task HandleDelete(int id)
    {
        DeleteId = id;

        await _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;

        if (isConfirmed && DeleteId != null)
        {
            await _bookManager.DeleteBookAsync(DeleteId.Value);
            await _jsRuntime.ToastrSuccess("Book deleted successfully");
            
            Books = await _bookManager.GetBooksAsync();
        }

        await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }
}